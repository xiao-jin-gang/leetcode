//给你一个字符串 s ，颠倒字符串中 单词 的顺序。

//单词 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的 单词 分隔开。

//返回 单词 顺序颠倒且 单词 之间用单个空格连接的结果字符串。

//注意：输入字符串 s中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。


class Solution {
    public String reverseWords(String s) {
        if(s == " "||s==null){
            return s;
        }
        String[] array = s.split(" ");
        int size = 0;
        for (int m = 0; m < array.length; m++ ) {
            if (!"".equals(array[m])){
                array[size++] = array[m];
            }
        }
        // size取前三个
        int j  =size -1;
        int i = 0;
        while( i < j ){
            String temp = array[i];
            array[i] = array[j];
            array[j] = temp;
            i++;
            j--;
        }
        StringBuilder builder = new StringBuilder();
        for (int k = 0; k < size; k++){
            builder.append(array[k]);
            if (k != size-1){
                builder.append(" ");
            }

        }

        return builder.toString();
    }
}
//**********************************************************
// 移除多余空格
    private StringBuilder removeSpace(String s) {
        int start = 0;
        int end = s.length() -1;
        //移除前面空格
        while(s.charAt(start) == ' '){
            start++;
        }
        //移除末尾空格
        while (s.charAt(end) == ' ') {
            end--;
        }
        StringBuilder builder = new StringBuilder();
        // 移除中间空格
        while (start <= end ){
            char c = s.charAt(start);
            // 字符串当下字符不为空 或者 新建builder末尾不为空 可以追加字符 否则两者都为空字符不进行添加
            if (c != ' ' || builder.charAt(builder.length()-1) !=' ') {
                builder.append(c);
            }
            start++;
        }
        return builder;
    }
