/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
// 双指针法
 // 链表是否有环
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode fast = head,slow = head;
        while (true) {
            if (fast == null || fast.next == null) { 
                return null;
            }
            slow = slow.next;
            fast = fast.next.next;
            if(fast == slow ) { 
                break; //第一次相遇
            }
        }
        // 第二次相遇的时候正好是从起点出发到入环口 = slow走的距离+(n-1)的环计算得到的
        fast = head;
        while(slow != fast) {
            slow = slow.next;
            fast = fast.next;
        }
        return fast;
    }
}

//hash表法