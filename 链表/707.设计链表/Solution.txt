//设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。

//在链表类中实现这些功能：

//get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。
//addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。
//addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。
//addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。
//deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。


//单链表

class MyLinkedList {
    int size;   //长度大小
    ListNode head;  //头节点
    public MyLinkedList() {
        size = 0;
        head = new ListNode(0);
        
    }
    // 获取链表中第index个节点的值 size > index size是链表长度
    public int get(int index) {
        if (index < 0 || index >= size) {
            return -1;
        }
        ListNode currentNode;
        currentNode = head;
        for(int i = 0; i <= index; i++) {
            currentNode = currentNode.next;
        }
        return currentNode.val;
    }
   //在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。
    public void addAtHead(int val) {
        addAtIndex(0,val);
    }
    //mowei
    public void addAtTail(int val) {
        addAtIndex(size,val);
    }
   // 在链表中的第 index 个节点之前添加值为 val  的节点。
   // 如果 index 等于链表的长度，则该节点将附加到链表的末尾。
   // 如果 index 大于链表长度，则不会插入节点。
   // 如果index小于0，则在头部插入节点。
    public void addAtIndex(int index, int val) {
        if(index > size) {
            return;
        }
        ListNode pre = head;
        ListNode addNode = new ListNode(val);
        size++; //添加一个长度加1；
        if(index <= 0) {
            addNode.next = head.next;
            head.next = addNode;
            return;
        }
        for(int i = 0; i < index; i++) {
            pre = pre.next;
        }
        addNode.next = pre.next;
        pre.next = addNode;
    }
    //删除
    public void deleteAtIndex(int index) {
        //删除末尾元素2, size =3
        if (index < 0 || index >= size) {
            return;
        }
        ListNode pre = head;
        for(int i = 0; i < index; i++) {
            pre = pre.next; //0,1
        }
        size--;
        pre.next = pre.next.next;
    }
}
//双链表

class MyLinkedList {
    class ListNode {
        int val;
        ListNode next,prev;
        ListNode(int val) {
            this.val = val;
        }
    }
    int size;   //长度大小
    ListNode head,tail;  //头节点,尾结点
    public MyLinkedList() {
        size = 0;
        head = new ListNode(0);
        tail = new ListNode(0);
        head.next = tail;   //前节点
        tail.prev = head;   //尾节点        
    }
    // 获取链表中第index个节点的值 size > index size是链表长度
    public int get(int index) {
       if(index >= size || index < 0){
           return -1;
       }
       ListNode currentNode = head;
       // 通过判断index<(size -1)/2来决定是从头节点还是未结点遍历，提高效率
       if(index < (size -1) / 2) {
           // 头节点遍历 因为加了个头节点所以<=
           for(int i = 0; i <= index;i++){
               //遍历到当前节点
               currentNode = currentNode.next;
           }
       }else {
           currentNode = tail;
           for (int i = 0; i <= size - index - 1; i++) {
               currentNode = currentNode.prev;
           }
       }
        return currentNode.val;
    }
   //在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。
    public void addAtHead(int val) {
        ListNode cur = head;
        ListNode newNode =new ListNode(val);
        newNode.next = cur.next;
        cur.next.prev = newNode;
        cur.next = newNode;
        newNode.prev = cur;
        size++;
    }
    //mowei
    public void addAtTail(int val) {
        ListNode cur = tail;
        ListNode newNode = new ListNode(val);
        newNode.next = tail;
        newNode.prev = cur.prev;
        cur.prev.next = newNode;
        cur.prev = newNode;
        size++;

    }
   // 在链表中的第 index 个节点之前添加值为 val  的节点。
   // 如果 index 等于链表的长度，则该节点将附加到链表的末尾。
   // 如果 index 大于链表长度，则不会插入节点。
   // 如果index小于0，则在头部插入节点。
    public void addAtIndex(int index, int val) {
        if(index > size) {
            return;
        }
        if(index < 0) {
            index = 0;
        }
        ListNode cur = head;
        for(int i = 0; i < index; i++) {
            cur = cur.next;
        }
        ListNode newNode = new ListNode(val);
        newNode.next = cur.next;
        cur.next.prev = newNode;
        newNode.prev = cur;
        cur.next = newNode;
        size++;
    }
    //删除
    public void deleteAtIndex(int index) {
       if(index < 0 || index >= size) {
           return;
       }
       ListNode cur = head;
       for (int i = 0; i < index; i++){
           cur = cur.next;
       }
       cur.next.next.prev = cur;
       cur.next = cur.next.next;
       size--;
    }
}


